[
{
	"uri": "/",
	"title": "CloudFront Signed URL",
	"tags": [],
	"description": "",
	"content": "Generate CloudFront Signed URL Overview In this lab, you\u0026rsquo;ll learn how to create CloudFront signed URL to securely and privately access your contents stored in S3.\nContent Introduction Preparation Secure CloudFront distribution Create Lambda Function Create API Gateway Clean up resources "
},
{
	"uri": "/3-securecloudfrontdistribution/3.1-createcloudfrontkeygroup/",
	"title": "Create CloudFront Key Group",
	"tags": [],
	"description": "",
	"content": "In this step you generated a public-private key pair, created a CloudFront Key group with a public key, and associated the Key group to your CloudFront distribution.\nGenerate a key pair First you will create a public-private key pair. The key pair must meet the following requirements:\nIt must be an SSH-2 RSA key pair. It must be in base64-encoded PEM format. It must be a 2048-bit key pair. Generate an RSA key pair with a length of 2048 bits and save to the file named private_key.pem.\nopenssl genrsa -out private_key.pem 2048 Next, we will extract the public key from the file private_key.pem and save to the file named public_key.pem.\nopenssl rsa -pubout -in private_key.pem -out public_key.pem The resulting file will contains both the public and the private key. Upload Public Key Navigate to Amazon CloudFront Management Console\nIn the navigation menu, choose Public keys.\nChoose Create public key.\nIn the Create public key window:\nFor Key name field, type a name to identify the public key. For example: SignedUrlPublicKey For Description field, type a short description to describe the public key. For example: Signed Url Public Key For Key value field, copy and paste the contents of the public key from the file public_key.pem you created in the previous step. Finally, click on Create public key. How to get the content of your public key.\n$ cat public_key.pem Rememmber this public Key ID. You will use it later section. Create Key group Navigate to Amazon CloudFront Management Console. On the left navigation, scroll down to Key management section, choose Key groups.\nChoose Create key group.\nOn the Create key group page, do the following:\nIn the Key group name field, type the name of the key group. For example: SignedUrlKeyGroup For the Description field, type a comment to describe the key group. For example: Signed Url Key Group For Public keys, select the public key you created on the previous step to add to the key group by choosing its ID. Choose Create key group. Rememmber this key group ID.\nAssociate Key group Next we will secure the Amazon CloudFront distribution to restrict public access.\nIn the navigation menu, choose Distributions. Click on the Distribution ID of the distribution you created before.\nNavigate to the Behaviors tab. Select the default Origin or Origin Group and then, choose Edit.\nScroll down to Restrict Viewer Access (Use Signed URLs or Signed Cookies) section:\nChoose Yes to expand the Trusted Key Groups or Trusted Signer option. Under Trusted Key Groups or Trusted Signer, select Trusted Key Groups. In the Add key groups field, choose the key group from the previous step. Scroll down to the bottom of the page, choose Save changes.\nTest new distribution Now verify that the distribution is restricted. Refresh the image or reopen the URL https://dxxxxxxxxxz.cloudfront.net/, you should see the error message as bellow:\n"
},
{
	"uri": "/3-securecloudfrontdistribution/3.2-createsecretmanager/",
	"title": "Create Secrets Manager",
	"tags": [],
	"description": "",
	"content": "In this step you will push secret key to AWS Secrets Manager. Up to this point, you have used Amazon S3 and Amazon CloudFront, which are AWS global services. As AWS Secrets Manager and AWS Lambda are regional services, you will need to pick an AWS region to use for the remainder of this sample. In this Lab, I use us-east-1.\nCreate a Secret Navigate to AWS Secrets Manager Management Console.\nChoose Store a new secret.\nIn the create secret window:\nIn the Select secret type section, select Other type of secrets. For Specify the key/value pairs to be stored in this secret select Plaintext. In the Key field, enter the name of your secret key. For the Value field, copy and paste the contents of the private key in the file named private_key.pem from previous step. Remember to format the content of that file before storing to Secret manager. Choose Next. To get the secret value like the picture above you need to format the value from private_key.pem file:\nawk \u0026#39;NF {sub(/\\r/, \u0026#34;\u0026#34;); printf \u0026#34;%s\\\\n\u0026#34;,$0;}\u0026#39; private_key.pem For Secret name, provide a name SignedUrlPrivateKey. For the Descripton field, enter Signed Url Private Key. Then scroll down and choose Next.\nIn the next window, leave the Disable automatic rotation checked. Then scroll down and choose Next.\nReview all of the options again. Then move to the bottom of the page and choose Store.\nSelect your Secret to view the details.\nRecord both the Secret name and Secret ARN. You will need them for the next step.\nIn this step you configured AWS Secrets Manager to store the CloudFront private key to be consumed by a downstream client. Next you will configure an AWS Lambda function to generate CloudFront signed URLs.\n"
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Many companies that distribute content over the internet want to restrict access to documents, business data, media streams, or content that is intended for selected users, for example, users who have paid a fee. To securely serve this private content by using CloudFront, you can do the following:\nRequire that your users access your private content by using special CloudFront signed URLs or signed cookies. Require that your users access your content by using CloudFront URLs, not URLs that access content directly on the origin server (for example, Amazon S3 or a private HTTP server). Requiring CloudFront URLs isn\u0026rsquo;t necessary, but we recommend it to prevent users from bypassing the restrictions that you specify in signed URLs or signed cookies. A signed URL includes additional information, for example, an expiration date and time, that gives you more control over access to your content.\nBy using signed URL, you get the following advantages:\nRestricting access to files in CloudFront caches. Restricting access to files in Amazon S3 buckets. (What we will do in this lab) Restricting access to files on custom origins. Overview architechture User will call a GET API provided by API Gateway. API Gateway will trigger Lambda Function. Lambda Function then retieve private key from Secret Manager. Lambda Function uses that secret key to create a signed URL from CloudFront Distribution URL and return this URL back to user. User now can access the S3 contents using provided URL. "
},
{
	"uri": "/2-prerequiste/2.1-creates3bucket/",
	"title": "Preparing a S3 bucket",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a private Amazon S3 bucket and upload an image to that bucket.\nNote: Amazon S3 routes any virtual hostedâ€“style requests to the US East (N. Virginia) region by default if you use the US East (N. Virginia) endpoint (s3.amazonaws.com). When you create a new bucket, in any region, Amazon S3 updates DNS to reroute the request to the correct region, which might take time when using Amazon CloudFront for distribution in later section. For the purpose of this exercise, you will create a new bucket in AWS region us-east-1. Detailed explanation of AWS Virtual hosting of buckets is provided in AWS User Guide.\nCreate S3 Bucket Go to Amazon S3 management console\nClick Buckets. Click Create bucket. At the Create bucket page.\nIn the AWS Region field, select US East (N. Virginia) us-east-1. In the Bucket type field, select General purpose. In the Bucket name field, enter your bucket name. (Example: -exclusive-content) Leave other fields as default. Scroll to the bottom of the page, click Create bucket. Choose the bucket you have just created by clicking on its name. Choose Upload. Choose Add files. Select an image on your computer to upload. Your image you choose will be shown on the screen. Click Upload to upload your image to S3 bucket. After your image is uploaded successfully, click Return to return to your bucket. To view the detail of the object you have just uploaded, click on the object name. If you try to access the image using the Object URL you will get an access denied message. This is exactly what we want. We want to keep your S3 contents private and will only distribute them using an Amazon CloudFront distribution. In the next step, you will create the Amazon CloudFront Distribution.\n"
},
{
	"uri": "/2-prerequiste/2.2-createcloudfrontdistribution/",
	"title": "Create CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": "Create Amazon CloudFront Distribution In this step, we will create a CloudFront distribution with the S3 bucket from Step 1 as source. Access to the bucket will be restricted by using an Origin Access Identity (OAI).\nNavigate to the Amazon CloudFront Management Console. Choose Create Distribution. In the Create distribution window:\nIn the field Origin Domain Name, choose the S3 Bucket from Step 1. In the field Origin access, choose Origin access control settings. In the field Origin access control, choose Create new OAC. In the Create new OAC window:\nIn the field Signing behavior, choose Sign requests. Leave Do not override authorization header unchecked. Choose Create to continue.\nScroll down to Web Application Firewall (WAF), select Do not enable security protections. Continue:\nLeave every options left as default Scroll down to the bottom of the page and choose Create Distribution. You will have to wait around 5 minutes for your CloudFront distribution to be ready. When your CloudFront distribution is ready, you can click on its name to view its information in details. Now we have to add a policy to S3 bucket to allow CloudFront Distribtuion get image from that bucket.\nClick on the ID of the distribution you created. In the distribution view, choose Origins tab. Select the origin you just created and choose Edit. In the Edit origin view, choose Copy policy to copy the S3 bucket policy to your clipboard and click on Go to S3 bucket permissions. Scroll down to Bucket policy section, choose Edit In the Bucket polycy edit page, paste the policy you coppied to the Policy board and choose Save changes Return to CloudFront distribution page, under Domain Name copy the FQDN, similar to the format dxxxxxxxxxz.cloudfront.net.\nTest the distribution Now let\u0026rsquo;s verify that the distribution is setup correctly and has access to the Amazon S3 contents.\nUse your browser and enter the URL https://dxxxxxxxxxz.cloudfront.net/. Remember to replace the domain name with your FQDN. Your sample image should come up correctly. However, anyone have your URL can access your Amazon S3 contents.\nIn the next step, we will secure the Amazon CloudFront distribution to restrict public access.\n"
},
{
	"uri": "/4-createcloudfrontsignedurl/4.2-usingcannedpolicy/",
	"title": "Create CloudFront Distribution using Canned Policy ",
	"tags": [],
	"description": "",
	"content": "In this step you will use AWS Lambda to create Amazon CloudFront Signed URLs with a Canned Policy. Click here for detailed information about canned and custom policies.\nCreate Lambda Function In the AWS Management Console, navigate to the AWS Lambda Management Console. Select the same AWS Region that you use for AWS Secrets Manager. Choose Create function. Select Author from scratch. For Function name, provide a name. For Runtime, select Node.js 12.x. For Execution role under Change default execution role, select Create a new role with basic Lambda permissions. Choose Create functions. Replace the Lambda index.js codes with the codes from cf_signedurl_canned.js. Add the following Environmental variables to the function: awsRegion: \u0026ldquo;us-west-2\u0026rdquo; //Replace with your Region amazonCloudFrontKeyPairId: \u0026ldquo;K2XXXXXXXXXXXX\u0026rdquo; //From Step 3 awsSecretsManagerSecretName: \u0026ldquo;your_secret_name\u0026rdquo; //From Step 4 Save and Deploy the function. Since the newly created Lambda role does NOT have permission to access AWS Secrets Manager, you will need to update the role in IAM to include the permission below. The complete policy is included in lambda_role_policy.json. Remember to replace the Resource ARN with your Secret ARN from Step 4. { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:secretsmanager:us-west-2:8xxxxxxxxxx6:secret:your_secret_name\u0026#34; } Before you can test the function, you will need to create a test event. For the canned policy you will need a base URL and an expiration time. Create a sample test event as shown below, which is also included in cf_signedurl_canned_event.json. Replace the domain with your CloudFront FQDN. Note that we appended two dummy query strings q1 and q2 for illustration purpose only. You can omit the query strings, but remember to keep the trailing ?. { \u0026#34;baseUrl\u0026#34;: \u0026#34;https://d1hxxxxxxxxxx.cloudfront.net/sample.html?q1=123\u0026amp;q2=abc\u0026#34;, \u0026#34;expiration\u0026#34;: \u0026#34;12/12/2021 12:30:30 EST\u0026#34; } "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create a S3 bucket with a sample image and CloudFront distribution.\nIntroduction Amazon Simple Storage Service (Amazon S3) is a industry-leading object storage service known for its scalability, data reliability, security, and speed. It caters to businesses of all sizes and industries, allowing them to securely store and manage vast amounts of data for various purposes like data lakes, cloud-native applications, and mobile apps. S3 offers cost-effective storage options and user-friendly management tools, enabling users to optimize expenses, categorize data efficiently, and implement precise access controls to align with specific business, organizational, and compliance needs.\nAmazon CloudFront is a web service designed to accelerate the delivery of both static and dynamic web content like HTML, CSS, JavaScript, and images to users. It operates through a global network of data centers known as edge locations. Requests from users are directed to the nearest edge location to minimize latency, ensuring optimal performance when delivering content.\nArchitecture Content Prepare a S3 bucket Create CloudFront Distribution "
},
{
	"uri": "/3-securecloudfrontdistribution/",
	"title": "Secure your CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": "Introduction AWS Secrets Manager helps you manage, retrieve, and rotate database credentials, application credentials, OAuth tokens, API keys, and other secrets throughout their lifecycles. Many AWS services store and use secrets in Secrets Manager.\nContent Create CloudFront Key Group Create Secret Manager "
},
{
	"uri": "/4-createcloudfrontsignedurl/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "Introduction AWS Lambda is a compute service that lets you run code without provisioning or managing servers. Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, and logging.\nIn this step you will create AWS Lambda and use it to create Amazon CloudFront Signed URLs.\nArchitecture Create Lambda Function From your AWS management console and navigate to the AWS Lambda Management Console.\nSelect the same AWS Region that you use for AWS Secrets Manager. Currently, this lab uses region us-east-1.\nClick on Functions on the left navigation, and then choose Create function.\nFrom Create function window:\nSelect Author from scratch. For Function name, provide a name. For example: signCloudFrontUrlFunction For Runtime, select Node.js 16.x. Scroll down to Change default execution role section, for Execution role select Create a new role with basic Lambda permissions. Leave the Advanced settings section untouched and choose Create functions\nWait a little bit for the Lambda Function to be provisioned.\nReplace the Lambda index.js codes with the codes from bellow.\nconst AWS = require(\u0026#39;aws-sdk\u0026#39;); const s3ObjectPath = \u0026#39;\u0026#39;; const awsCloudFrontUrl = \u0026#39;\u0026#39;; const amazonCloudFrontKeyPairId = \u0026#39;\u0026#39;; const awsRegion = \u0026#39;\u0026#39;; const awsSecretsManagerSecretName = \u0026#39;\u0026#39;; const awsSecretsManagerSecretKeyName = \u0026#39;\u0026#39;; const secretsManager = new AWS.SecretsManager({region: awsRegion}); const getKeyFromSecretsManager = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { secretsManager.getSecretValue({SecretId: awsSecretsManagerSecretName}, (err, data) =\u0026gt; { if (err) { console.log (\u0026#34;Get Secret Error\u0026#34;, err); return reject(err); } console.log(\u0026#34;Private key retrieved\u0026#34;); const key = JSON.parse(data.SecretString); const key_val = key[awsSecretsManagerSecretKeyName].replace(/\\\\n/g, \u0026#39;\\n\u0026#39;); return resolve(key_val); }); }); } exports.handler = async function(event, context) { const privateKey = await getKeyFromSecretsManager(); const signer = new AWS.CloudFront.Signer(amazonCloudFrontKeyPairId, privateKey); const delta5Mins = 5 * 60 * 1000; const signedUrl = signer.getSignedUrl({ url: `https://${awsCloudFrontUrl}/${s3ObjectPath}`, expires: Math.floor((Date.now() + delta5Mins) / 1000) }); return { body: JSON.stringify({signedUrl}), statusCode: 200 }; } There are 6 parametes you must fill for the function to work:\ns3ObjectPath: Name of the object you push to S3 in step 2.1. If you store it in a subfolder, the path will be: /. In my case, this value is: sebastian.jpg awsCloudFrontUrl: CloudFront Distribution URL you created in step 2.2. Format: dxxxxxxxxxz.cloudfront.net. (You don\u0026rsquo;d have to put https:// in front of the CloudFront url) amazonCloudFrontKeyPairId: Key group ID of the CloudFront public key group you created in step 3.1. awsRegion: The region of Secret Manager you stored your secret in step 3.2. awsSecretsManagerSecretName: Name of the Secret Manager in step 3.2. awsSecretsManagerSecretKeyName: Name of the key of the private key you stored in Secret Manager in step 3.2. Save and Deploy the function. Then you can create a Test event like bellow. After creating a test event. You can run Test to check if the function works. However, you will get the error like this: You know why? Because we have not added the permission to read the Secret from Secret Manager to Lambda Function execution role.\nSince the newly created Lambda role does NOT have permission to access AWS Secrets Manager, you will need to update the role in IAM. To quickly update this role, follow the step in the image bellow:\nAfter navigating to the role needed to modify, choose Add permission -\u0026gt; Create inline policy.\nIn the Specify permissions window, change to JSON view.\nThen copy and paste the policy bellow. Remember to change the resource arn to the arn of the Secret you created in Secret Manager in step 3.2.\n{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:secretsmanager:us-west-2:8xxxxxxxxxx6:secret:your_secret_name\u0026#34; } Choose Next to continue. In Review and create window, give the newly created policy a name and review the options. Choose Create policy to finish.\nReturn to your Lambda Function and run the Test again. If you set up correctly, the result will be looked like that:\nIn the log window, you will get the signed URL. Copy this URL and paste to your browser, this time you will be able to access your image stored in S3.\nRefresh the URL above after 5 minutes and you will get the error. Because we set the expired time to 5 minutes, after that amount of time, the URL will no longer work.\n"
},
{
	"uri": "/5-createapigateway/",
	"title": "Create API Gateway ",
	"tags": [],
	"description": "",
	"content": "Introduction AWS API Gateway is a fully managed service that enables developers to create, publish, maintain, monitor, and secure APIs at any scale. It acts as a front door for applications to access data, business logic, or functionality from backend services, such as AWS Lambda functions, Amazon EC2 instances, or other HTTP endpoints.\nIn the previous step, to get a signed URL you have to trigger Lambda Function. In this step you will create AWS API Gateway and connect to AWS Lambda Function to get signed URL for you.\nArchitecture Create API Gateway From your AWS management console and navigate to the AWS API Gateway Management Console.\nYou will be routed to the Create API window. From there, scroll down to REST API section, choose Build.\nFrom the Create REST API window:\nSelect New API. For API name field, provide a name. For example: Sign URL API. For Description field, you can describe your API like: API used to get signed URL. Scroll down and choose Create. Wait a little for your API to be created.\nIn the Resources window, choose Create method.\nIn the Create method window:\nFor the Method type field, select GET. For the Integration type field, select Lambda function. For the Lambda function field, select the Region you deployed your Lambda Function in step 4 and select the right arn of that function. Scroll down to the bottom and select Create Now, let deploy your newly created API by selecting Deploy API\nIn the Deploy API poped up window:\nFor the Stage field, select New stage. For the Stage name field, enter testStage. For the Deployment description field, enter API gets CloudFront signed URL. Select Deploy. You will be navigated to the Stage screen of this API Gateway. Copy the invoke url and paste it to a new tab in your browser. (You can use another tools like Postman to call that API).\nYou will get the CloudFront signed URL to get the image stored in S3.\nCopy that URL and paste to a new tab.\nNow, you can call the API to get the CloudFront signed URL of the image stored in S3.\n"
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete API Gateway Go to AWS API Gateway Management Console.\nChoose the API Gateway you created. Select Delete option. Type Confirm to confirm the deleteion. Delete Lambda Function Go to AWS Lambda Management Console.\nChoose the Lambda Function you created. In the Action box, select Delete. To confirm deletion, type delete. Deleting a function permanently removes the function code. The related logs, roles, test event schemas, and triggers are retained in your account.\nGo to IAM service management console\nClick Roles. In the search box, type the name of the Lambda Function you created. In my case, it is signedUrlFunction. Click to select this role. Click Delete, then enter the role name and click Delete to delete the role. Delete Secret Manager Go to AWS Secrets Manager Management Console\nChoose the Secret you created. Click on Actions menu, then chose Delete to delete. To protect your secret from accidental deletions, you will have to wait at least 7 days before permanently deleting the secret. Change to 7 days and choose Schedule deletion. Delete CloudFront Go to Amazon CloudFront Management Console\nChoose the CloudFront Distribution you created. First, you will have to disable the distribution. Because CloudFront must propagate this change to all edge locations, it might take a few minutes before the update is complete and you can delete your distribution. After 5 minutes, you will be able to Delete the distribution. Confirm deletetion by choosing Delete Delete S3 bucket Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: huytg-exclusive-content ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]